import { useState, useEffect } from "react";
const { Configuration, OpenAIApi } = require("openai");

const MAX_CLICKS = 5;

export default function QuinnAI() {
  const [input, setInput] = useState("");
  const [copyInput, setCopyInput] = useState("");
  const [result, setResult] = useState();
  const [clickCount, setClickCount] = useState(0);

  const configuration = new Configuration({
    apiKey: process.env.REACT_APP_OPENAI_API_KEY,
  });

  const openai = new OpenAIApi(configuration);

  useEffect(() => {
    const storedCount = localStorage.getItem("clickCount");
    if (storedCount) {
      setClickCount(parseInt(storedCount));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem("clickCount", clickCount);
  }, [clickCount]);

  useEffect(() => {
    document.title = "quinn's ai ⚈皿⚈";
  }, []);

  function textInput(e) {
    setInput(e.target.value);
  }

  async function onSubmit(event) {
    event.preventDefault();

    if (clickCount >= MAX_CLICKS) {
      return;
    }

    try {
      const response = await openai.createCompletion({
        model: "curie:ft-personal:400-questions-2023-03-05-22-44-00",
        prompt: input.concat("[PEND]"),
        temperature: 0.7,
        max_tokens: 20,
        top_p: 1,
        frequency_penalty: 0.23,
        presence_penalty: 0,
        stop: ["[CEND]"],
      });

      const data = response.data.choices[0].text;
      if (response.status !== 200) {
        throw (
          data.error ||
          new Error(`Request failed with status ${response.status}`)
        );
      }

      setResult(data.concat(" :)"));
      setCopyInput(input);
      setInput("");
      setClickCount(clickCount + 1);
    } catch (error) {
      console.error(error);
      alert(error.message);
    }
  }

  return (
    <div>
      <h1>ask quinn ai a question!</h1>
      <form onSubmit={onSubmit}>
        <textarea
          type="text"
          name="prompt"
          placeholder="what do you want to ask quinn ai?"
          value={input}
          onChange={(e) => textInput(e)}
          maxLength="100"
        />
        <div className="flex-box" id="form">
          {clickCount < MAX_CLICKS ? (
            <input
              type="submit"
              value={`ask! (${MAX_CLICKS - clickCount}/${MAX_CLICKS})`}
              id="submit-btn"
            />
          ) : (
            <p>no more submissions left!</p>
          )}
          <p className="count"> {100 - clickCount}/100</p>
        </div>
      </form>
      <p className="disclaimer">
        <i>
          *note that responses are generated by an ai model, and may not be
          accurate. for best responses, use proper grammar, and end prompts with
          a "?"
        </i>
      </p>
      <hr className="dashed" />
      <p>question: {copyInput}</p>
      <p>quinn ai answer: {result}</p>
    </div>
  );
}
